{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","baseUrl","notesService","getAll","request","axios","get","nonExisting","id","date","then","response","data","concat","create","newObject","post","update","put","Footer","style","color","fontStyle","fontSize","App","React","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c9c5baea.chunk.js","sourcesContent":["\nimport React from 'react'; // Necessary, as this is a React component.\n\nconst Note = ({note, toggleImportance}) => {\n    const label = note.important ? 'make not important' : 'make important';\n    return (\n        <li className='note'> \n            {note.content} <button onClick={toggleImportance}> {/* Ensures space. */}\n                {label} \n            </button>\n        </li>\n    );\n};\n\nexport default Note;\n","\nimport React from 'react';\n\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null; // Render nothing.\n    }\n  \n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    );\n};\n\n\nexport default Notification;\n","\nimport axios from 'axios';\n\n// const baseUrl = 'http://localhost:3001/notes'; // (db.json)\n// const baseUrl = 'http://localhost:3001/api/notes'; // (backend, local)\n// const baseUrl = 'https://fsopen-notes-backend.herokuapp.com/api/notes'; // (backend, Heroku)\n/* Now that build lives in the backend directory, we can use a relative url */\nconst baseUrl = '/api/notes';\n\n/* Users don't care about http responses, so only return data! */\n// const getAll = () => {\n//     const request = axios.get(baseUrl);\n//     return request.then(response => response.data);\n// };\n\nconst getAll = () => {\n    const request = axios.get(baseUrl);\n    const nonExisting = {\n        id: 10000,\n        content: 'This note is not saved to server',\n        date: '2019-05-30T17:30:31.098Z',\n        important: true,\n    };\n    return request.then(response => response.data.concat(nonExisting));\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject);\n    return request.then(response => response.data);\n};\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject);\n    return request.then(response => response.data);\n};\n\nconst notesService = {getAll, create, update}; // The module returns an object with these functions.\n// Use the new compact way to create objects with keys that have the same name as the variables passed in.\n\nexport default notesService;\n","\nimport React from 'react';\n\nimport Note from './components/Note'; // Imports are relative. (.) is the current directory. The extension (.js) can be dropped.\nimport Notification from './components/Notification';\nimport noteService from './services/notes'; // We can name this however we please.\n\n\n/* Uses inline CSS: CamelCase instead of kebab case, strings use quotes, no units. */\nconst Footer = () => {\n    const footerStyle = {\n      color: 'green',\n      fontStyle: 'italic',\n      fontSize: 16\n    };\n\n    return (\n        <div style={footerStyle}>\n            <br />\n            <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\n        </div>\n    );\n};\n\n\nconst App = () => {\n    const [notes, setNotes] = React.useState([]) // Empty until the effect triggers.\n    const [newNote, setNewNote] = React.useState('a new note...'); // Default item in the textbox. \n    const [showAll, setShowAll] = React.useState(true); // Whether to show all notes, or just important notes.\n\n    const [errorMessage, setErrorMessage] = React.useState(null); // No error by default.\n\n    /* Effect: Grab notes from the server, once! */\n    React.useEffect(() => {\n        noteService.getAll().then(initialNotes => {\n            setNotes(initialNotes)\n        });\n    }, []); // [] means only call the effect one time.\n\n    const addNote = (event) => {\n        /* Prevent the default action of submitting the form (which would reload\n         * the page, among other things). */\n        event.preventDefault(); \n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() < 0.5,\n        }; // Id ignored, allow json-server to generate id.\n\n        noteService.create(noteObject).then(returnedNote => {\n            // response.data is slightly different from noteObject: It has an id!\n            setNotes(notes.concat(returnedNote));\n            setNewNote('');\n        });\n    };\n    \n    const handleNoteChange = (event) => {\n        setNewNote(event.target.value);\n    };\n\n    const toggleImportanceOf = (id) => {\n        const note = notes.find(n => n.id === id);\n        // Spread Syntax to get a new note (no modification!) with just the importance changed\n        // PS: This is a shallow copy.\n        const changedNote = {...note, important: !note.important}; \n\n        noteService\n            .update(id, changedNote)\n            .then(returnedNote => {\n                setNotes(notes.map(note => note.id !== id ? note : returnedNote)); // A total copy except for the changed note.\n            })\n            .catch(error => { // Handle deleted notes gracefully.\n                setErrorMessage(\n                    `Note '${note.content}' was already removed from server`\n                );\n                setTimeout(() => { setErrorMessage(null); }, 5000);\n                setNotes(notes.filter(n => n.id !== id));\n            });\n    };\n    \n    const notesToShow = showAll ? notes : notes.filter(note => note.important)\n\n    return (\n        <div>\n            <h1>Notes</h1>\n            <Notification message={errorMessage}/>\n            <button onClick={() => setShowAll(!showAll)}>\n                show {showAll ? 'important' : 'all'}\n            </button>\n            <ul>\n                {notesToShow.map(note => // (***)\n                    <Note \n                        key={note.id} \n                        note={note}\n                        toggleImportance={() => toggleImportanceOf(note.id)}\n                    /> // key id is needed by React to efficiently re-render the list.\n                )}\n            </ul>\n            <form onSubmit={addNote}>\n                <input value={newNote} onChange={handleNoteChange}/>\n                <button type=\"submit\">save</button>\n            </form> \n            <Footer/>\n        </div>\n    );\n};\n\nexport default App;\n","\n// import axios from 'axios';\nimport ReactDOM from 'react-dom';\n\nimport App from './App.js';\nimport './index.css'\n\n/* Promises Demo */\n\n// const promise = axios.get('http://localhost:3001/notes');\n// console.log(promise);\n\n// promise.then(response => console.log(response));\n\n// const promise2 = axios.get('http://localhost:3001/foobar');\n// console.log(promise2);\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}